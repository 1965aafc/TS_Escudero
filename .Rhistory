factores <- PC[,1]
y.train <- cbind(y.train, factores)
var2 <- VAR(y.train, p=2, type = "const")
forecasts <- predict(var2, n.ahead = 1)
fcst.favar[i,] <- forecasts$fcst$y.train.IPC
}
#PronÃ³sticos rolling del VAR para h=1
fcst.var <-  matrix(0, nrow = 37, ncol = 4)
fcst.var <- ts(fcst.favar, start=c(2017,8), frequency = 12)
for(i in 2:37){
y.train <- window(y, start = 2005.083 + (i-1)/12, end = 2017.417 + (i-1)/12)
var2 <- VAR(y.train, p=2, type = "const")
forecasts <- predict(var2, n.ahead = 1)
fcst.var[i,] <- forecasts$fcst$IPC
}
#PronÃ³sticos rolling del AR(1) para h=1 (va a tardar unos minutos)
fcst.ar1 <- matrix(0, nrow = 37, ncol = 1)
fcst.ar1 <- ts(fcst.ar1, start=c(2017,8), frequency = 12)
for(i in 2:37){
y.train <- window(y[, "IPC"], start = 2005.083 + (i-1)/12, end = 2017.417 + (i-1)/12)
fit <- arima(y.train, order = c(1,0,0))
forecasts <- predict(fit, n.ahead = 1)
fcst.ar1[i,] <- forecasts$pred
}
#Grafico los pronÃ³sticos de los 3 modelos:
par(mfrow=c(1,2), oma=c(0.5,0.5,0.5,0.5), mar=c(2,2,2,2))
plot(diff(log(y.test)), main="Actual", ylab = "", xlab = "")
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
legend(2018.500, 0.002, legend=c("FAVAR", "VAR", "AR(1)"), col=c("grey", "black", "red"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
#Obtengo las medidas de accuracy: (evaluación media del modelo en todo el período)
accuracy(fcst.favar[,"Series 1"],y.test)
accuracy(fcst.var[,"Series 1"],y.test)
accuracy(fcst.ar1,y.test)
#Obtengo los errores de pronÃ³stico:
e.fcst.favar <- y[151:187,1]-fcst.favar[,"Series 1"]
e.fcst.var <- y[151:187,1]-fcst.var[,"Series 1"]
e.fcst.ar1 <- y[151:187,1]-fcst.ar1
#Test de Diebold-Mariano:
dm.test(e.fcst.favar, e.fcst.ar1, alternative = "two.sided", power = 2)
dm.test(e.fcst.var, e.fcst.ar1, alternative = "two.sided", power = 2)
#Test de Giacomini-Rossi:
install.packages("murphydiagram")
library(murphydiagram)
#obs out of sample > 30
loss.favar <-  e.fcst.favar^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.var <-  e.fcst.var^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.ar1 <-  e.fcst.ar1^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
fluctuation_test(loss.favar,loss.ar1, mu = 0.5) #mu es la inversa de m, ver paper
fluctuation_test(loss.var,loss.ar1, mu = 0.5)
#hacerlo para los otros, se observa que no hay cambio estructural en el periodo
#tests de RU sobre la serie en logaritmos
#ADF
summary(ur.df(log(df_ury_ts[ ,c("IPC")]),type="trend",selectlags="BIC"))
summary(ur.df(diff(log(df_ury_ts[ ,c("IPC")])),type="trend",selectlags="BIC"))
summary(ur.df(diff(diff(log(df_ury_ts[ ,c("IPC")]))),type="drift",selectlags="BIC"))
#PP
summary(ur.pp(log(df_ury_ts[ ,c("IPC")]), type="Z-tau",
model="trend",lags="long"))
summary(ur.pp(diff(log(df_ury_ts[ ,c("IPC")])), type="Z-tau",
model="trend",lags="long"))
summary(ur.pp(diff(diff(log(df_ury_ts[ ,c("IPC")]))), type="Z-tau",
model="constant",lags="long"))
#KPSS
summary(ur.kpss(log(df_ury_ts[ ,c("IPC")]),type="tau",lags="long"))
summary(ur.kpss(diff(log(df_ury_ts[ ,c("IPC")])),type="tau",lags="long"))
summary(ur.kpss(diff(diff(log(df_ury_ts[ ,c("IPC")]))),type="mu",lags="long"))
for(i in 1:40){
print(autoplot(df_ury_ts[ ,i]))
}
install.packages("murphydiagram")
for(i in c(1:20, 25:40)){
print(autoplot(diff(log(df_ury_ts[ ,i]))))
}
for(i in 21:24){
print(autoplot(diff(df_ury_ts[ ,i])))
}
#tests de RU sobre la serie en logaritmos, diferenciada, M2
#ADF
summary(ur.df(diff(log(x.1[ ,c("M2_cierre")])),type="trend",selectlags="BIC"))
#PP
summary(ur.pp(diff(log(x.1[ ,c("M2_cierre")])), type="Z-tau",
model="trend",lags="long"))
#KPSS
summary(ur.kpss(diff(log(x.1[ ,c("M2_cierre")])),type="tau",lags="long"))
#tests de RU sobre la serie en logaritmos, diferenciada, M2
#ADF
summary(ur.df(diff(log(x.1[ ,c("TC_Cier_med")])),type="trend",selectlags="BIC"))
#PP
summary(ur.pp(diff(log(x.1[ ,c("TC_Cier_med")])), type="Z-tau",
model="trend",lags="long"))
#KPSS
summary(ur.kpss(diff(log(x.1[ ,c("TC_Cier_med")])),type="tau",lags="long"))
fcst.ar1
fcst.favar
fcst.var
time(fcst.favar)
#PronÃ³sticos rolling del FAVAR para h=1
fcst.favar <- matrix(0, nrow = 37, ncol = 4) #matriz para almacenar prostico, li, ls etc
fcst.favar <- ts(fcst.favar, start=c(2017,8), frequency = 12)
for(i in 1:37){
y.train <- window(y, start = 2005.083 + (i-1)/12, end = 2017.500 + (i-1)/12) #ventana fija que se corre
x.4.train <- window(x.4, start = 2005.083 + (i-1)/12, end = 2017.500 + (i-1)/12)
pr.out <- prcomp(x.4.train, scale =TRUE)
PC <- scale(x.4.train)%*%pr.out$rotation #scale normaliza, %*% multiplica matrices
factores <- PC[,1]
y.train <- cbind(y.train, factores)
var2 <- VAR(y.train, p=2, type = "const")
forecasts <- predict(var2, n.ahead = 1)
fcst.favar[i,] <- forecasts$fcst$y.train.IPC
}
time(fcst.favar)
time(fcst.favar[,1])
fcst.favar[,1]
#PronÃ³sticos rolling del VAR para h=1
fcst.var <-  matrix(0, nrow = 37, ncol = 4)
fcst.var <- ts(fcst.favar, start=c(2017,8), frequency = 12)
for(i in 2:37){
y.train <- window(y, start = 2005.083 + (i-1)/12, end = 2017.500 + (i-1)/12)
var2 <- VAR(y.train, p=2, type = "const")
forecasts <- predict(var2, n.ahead = 1)
fcst.var[i,] <- forecasts$fcst$IPC
}
#PronÃ³sticos rolling del AR(1) para h=1 (va a tardar unos minutos)
fcst.ar1 <- matrix(0, nrow = 37, ncol = 1)
fcst.ar1 <- ts(fcst.ar1, start=c(2017,8), frequency = 12)
for(i in 2:37){
y.train <- window(y[, "IPC"], start = 2005.083 + (i-1)/12, end = 2017.500 + (i-1)/12)
fit <- arima(y.train, order = c(1,0,0))
forecasts <- predict(fit, n.ahead = 1)
fcst.ar1[i,] <- forecasts$pred
}
#Grafico los pronÃ³sticos de los 3 modelos:
par(mfrow=c(1,2), oma=c(0.5,0.5,0.5,0.5), mar=c(2,2,2,2))
plot(diff(log(y.test)), main="Actual", ylab = "", xlab = "")
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
legend(2018.500, 0.002, legend=c("FAVAR", "VAR", "AR(1)"), col=c("grey", "black", "red"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
#Grafico los pronÃ³sticos de los 3 modelos:
par(mfrow=c(1,2), oma=c(0.5,0.5,0.5,0.5), mar=c(2,2,2,2))
plot(diff(log(y.test)), main="Actual", ylab = "", xlab = "")
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
legend(2017.500, 0.012, legend=c("FAVAR", "VAR", "AR(1)"), col=c("grey", "black", "red"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
#Grafico los pronÃ³sticos de los 3 modelos:
par(mfrow=c(1,2), oma=c(0.5,0.5,0.5,0.5), mar=c(2,2,2,2))
plot(diff(log(y.test)), main="Actual", ylab = "", xlab = "")
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
legend(2017.500, 0.010, legend=c("FAVAR", "VAR", "AR(1)"), col=c("grey", "black", "red"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
#Grafico los pronÃ³sticos de los 3 modelos:
par(mfrow=c(1,2), oma=c(0.5,0.5,0.5,0.5), mar=c(2,2,2,2))
plot(diff(log(y.test)), main="Actual", ylab = "", xlab = "")
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
legend(2017.500, 0.011, legend=c("FAVAR", "VAR", "AR(1)"), col=c("grey", "black", "red"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
#Grafico los pronÃ³sticos de los 3 modelos:
par(mfrow=c(1,2), oma=c(0.5,0.5,0.5,0.5), mar=c(2,2,2,2))
plot(diff(log(y.test)), main="Actual", ylab = "", xlab = "")
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
legend(2017.400, 0.011, legend=c("FAVAR", "VAR", "AR(1)"), col=c("grey", "black", "red"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
#Grafico los pronÃ³sticos de los 3 modelos:
par(mfrow=c(1,2), oma=c(0.5,0.5,0.5,0.5), mar=c(2,2,2,2))
plot(diff(log(y.test)), main="Actual", ylab = "", xlab = "")
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
legend(2019.000, 0.011, legend=c("FAVAR", "VAR", "AR(1)"), col=c("grey", "black", "red"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
#Grafico los pronÃ³sticos de los 3 modelos:
par(mfrow=c(1,2), oma=c(0.5,0.5,0.5,0.5), mar=c(2,2,2,2))
plot(diff(log(y.test)), main="Actual", ylab = "", xlab = "")
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
legend(2018.800, 0.011, legend=c("FAVAR", "VAR", "AR(1)"), col=c("grey", "black", "red"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
fcst.ar1
#PronÃ³sticos rolling del VAR para h=1
fcst.var <-  matrix(0, nrow = 37, ncol = 4)
fcst.var <- ts(fcst.favar, start=c(2017,8), frequency = 12)
for(i in 1:37){
y.train <- window(y, start = 2005.083 + (i-1)/12, end = 2017.500 + (i-1)/12)
var2 <- VAR(y.train, p=2, type = "const")
forecasts <- predict(var2, n.ahead = 1)
fcst.var[i,] <- forecasts$fcst$IPC
}
#PronÃ³sticos rolling del AR(1) para h=1 (va a tardar unos minutos)
fcst.ar1 <- matrix(0, nrow = 37, ncol = 1)
fcst.ar1 <- ts(fcst.ar1, start=c(2017,8), frequency = 12)
for(i in 1:37){
y.train <- window(y[, "IPC"], start = 2005.083 + (i-1)/12, end = 2017.500 + (i-1)/12)
fit <- arima(y.train, order = c(1,0,0))
forecasts <- predict(fit, n.ahead = 1)
fcst.ar1[i,] <- forecasts$pred
}
#Grafico los pronÃ³sticos de los 3 modelos:
par(mfrow=c(1,2), oma=c(0.5,0.5,0.5,0.5), mar=c(2,2,2,2))
plot(diff(log(y.test)), main="Actual", ylab = "", xlab = "")
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
legend(2018.800, 0.011, legend=c("FAVAR", "VAR", "AR(1)"), col=c("grey", "black", "red"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
#Obtengo las medidas de accuracy: (evaluación media del modelo en todo el período)
accuracy(fcst.favar[,"Series 1"],y.test)
accuracy(fcst.var[,"Series 1"],y.test)
accuracy(fcst.ar1,y.test)
#Obtengo los errores de pronÃ³stico:
e.fcst.favar <- y[151:187,1]-fcst.favar[,"Series 1"]
e.fcst.var <- y[151:187,1]-fcst.var[,"Series 1"]
e.fcst.ar1 <- y[151:187,1]-fcst.ar1
#Test de Diebold-Mariano:
dm.test(e.fcst.favar, e.fcst.ar1, alternative = "two.sided", power = 2)
dm.test(e.fcst.var, e.fcst.ar1, alternative = "two.sided", power = 2)
#Test de Giacomini-Rossi:
library(murphydiagram)
#obs out of sample > 30
loss.favar <-  e.fcst.favar^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.var <-  e.fcst.var^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.ar1 <-  e.fcst.ar1^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
fluctuation_test(loss.favar,loss.ar1, mu = 0.5) #mu es la inversa de m, ver paper
fluctuation_test(loss.var,loss.ar1, mu = 0.5)
#hacerlo para los otros, se observa que no hay cambio estructural en el periodo
#Grafico los pronÃ³sticos de los 3 modelos:
par(mfrow=c(1,2), oma=c(0.5,0.5,0.5,0.5), mar=c(2,2,2,2))
plot(diff(log(y.test)), main="Actual", ylab = "", xlab = "")
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
lines(diff(log(y.test)), col = "green")
legend(2018.800, 0.011, legend=c("FAVAR", "VAR", "AR(1)", "RLZ"), col=c("grey", "black", "red", "green"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
#Grafico los pronÃ³sticos de los 3 modelos:
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
lines(diff(log(y.test)), col = "green")
legend(2018.800, 0.011, legend=c("FAVAR", "VAR", "AR(1)", "RLZ"), col=c("grey", "black", "red", "green"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
z <- ts(0, start=c(2005,2), end=c(2020,8), frequency = 12)
y.test
diff(log(y.test))
y.train
diff(log(y.test))
diff(log(y.train))
y.train
#Grafico los pronÃ³sticos de los 3 modelos:
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
lines(y.train[151:187], col = "green")
legend(2018.800, 0.011, legend=c("FAVAR", "VAR", "AR(1)", "RLZ"), col=c("grey", "black", "red", "green"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
y.rlz <- y.train[151:187]
y.rlz <- y.train[151:187,1]
#Grafico los pronÃ³sticos de los 3 modelos:
y.rlz <- y.train[151:187]
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
lines(y.new[151:187,1], col = "green")
#Grafico los pronÃ³sticos de los 3 modelos:
y.rlz <- y.train[151:187]
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
lines(ynew[151:187,1], col = "green")
legend(2018.800, 0.011, legend=c("FAVAR", "VAR", "AR(1)", "RLZ"), col=c("grey", "black", "red", "green"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
ynew
ynew[,1]
ynew[1,1]
ynew[[1,1]]
ynew[c("1"),1]
ynew[1]
ynew[1][151:187]
ynew[151:187,]
ynew[151:187,1]
y.rlz <- ynew[151:187,1]
y.rlz <- ts(ynew[151:187,1], start=c(2017,8), frequency = 12)
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
lines(y.rlz, col = "green")
legend(2018.800, 0.011, legend=c("FAVAR", "VAR", "AR(1)", "RLZ"), col=c("grey", "black", "red", "green"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
y.rlz
pr.out$rotation #es la matriz de pesos (loadings) que recibe cada variable en cada componente (las columnas son los autovectores)
pr.out$x #son los componentes principales
pr.out$center #es la media de cada x (antes de ser estandarizadas)
pr.out$scale #es el desvío estándar de cada x (antes de ser estandarizadas)
pr.out$sdev #es el desvío estándar de cada PC (notar que el PC1 es el que maximizó la varianza de las X)
pr.out$sdev^2 #los autovalores (ordenados en forma descendente)
colSums(pr.out$rotation^2)
zapsmall(cor(pr.out$x))
summary(favar1)
lista2 <- colnames(ynew)
causality(favar1, cause = c("y.M2_cierre","y.TC_Cier_med","factores...1."))
lista2 <- colnames(ynew)
causality(favar1, cause = c("y.M2_cierre","y.TC_Cier_med","factores...1."))
#PronÃ³sticos rolling del VAR para h=1
fcst.var <-  matrix(0, nrow = 37, ncol = 4)
fcst.var <- ts(fcst.var, start=c(2017,8), frequency = 12)
for(i in 1:37){
y.train <- window(y, start = 2005.083 + (i-1)/12, end = 2017.500 + (i-1)/12)
var2 <- VAR(y.train, p=2, type = "const")
forecasts <- predict(var2, n.ahead = 1)
fcst.var[i,] <- forecasts$fcst$IPC
}
#PronÃ³sticos rolling del AR(1) para h=1 (va a tardar unos minutos)
fcst.ar1 <- matrix(0, nrow = 37, ncol = 1)
fcst.ar1 <- ts(fcst.ar1, start=c(2017,8), frequency = 12)
for(i in 1:37){
y.train <- window(y[, "IPC"], start = 2005.083 + (i-1)/12, end = 2017.500 + (i-1)/12)
fit <- arima(y.train, order = c(1,0,0))
forecasts <- predict(fit, n.ahead = 1)
fcst.ar1[i,] <- forecasts$pred
}
#Grafico los pronÃ³sticos de los 3 modelos:
y.rlz <- ts(ynew[151:187,1], start=c(2017,8), frequency = 12)
plot(fcst.favar[,"Series 1"], col = "grey", lwd = 5, main="Forecasts", ylab = "", xlab = "")
lines(fcst.var[,"Series 1"])
lines(fcst.ar1, col = "red")
lines(y.rlz, col = "green")
legend(2018.800, 0.011, legend=c("FAVAR", "VAR", "AR(1)", "RLZ"), col=c("grey", "black", "red", "green"), lwd = c(5,1,1), box.lty=0, ncol = 1, cex = 0.8, y.intersp=0.8)
#Obtengo las medidas de accuracy: (evaluación media del modelo en todo el período)
accuracy(fcst.favar[,"Series 1"],y.test)
accuracy(fcst.var[,"Series 1"],y.test)
accuracy(fcst.ar1,y.test)
#Obtengo los errores de pronÃ³stico:
e.fcst.favar <- y[151:187,1]-fcst.favar[,"Series 1"]
e.fcst.var <- y[151:187,1]-fcst.var[,"Series 1"]
e.fcst.ar1 <- y[151:187,1]-fcst.ar1
#Test de Diebold-Mariano:
dm.test(e.fcst.favar, e.fcst.ar1, alternative = "two.sided", power = 2)
dm.test(e.fcst.var, e.fcst.ar1, alternative = "two.sided", power = 2)
#Test de Giacomini-Rossi:
library(murphydiagram)
#obs out of sample > 30
loss.favar <-  e.fcst.favar^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.var <-  e.fcst.var^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.ar1 <-  e.fcst.ar1^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
fluctuation_test(loss.favar,loss.ar1, mu = 0.5) #mu es la inversa de m, ver paper
fluctuation_test(loss.var,loss.ar1, mu = 0.5)
#hacerlo para los otros, se observa que no hay cambio estructural en el periodo
#Obtengo las medidas de accuracy: (evaluación media del modelo en todo el período)
accuracy(fcst.favar[,"Series 1"],y.test)
accuracy(fcst.var[,"Series 1"],y.test)
accuracy(fcst.ar1,y.test)
#Obtengo los errores de pronÃ³stico:
e.fcst.favar <- y[151:187,1]-fcst.favar[,"Series 1"]
e.fcst.var <- y[151:187,1]-fcst.var[,"Series 1"]
e.fcst.ar1 <- y[151:187,1]-fcst.ar1
#Test de Diebold-Mariano:
dm.test(e.fcst.favar, e.fcst.ar1, alternative = "two.sided", power = 2)
dm.test(e.fcst.var, e.fcst.ar1, alternative = "two.sided", power = 2)
#Test de Giacomini-Rossi:
library(murphydiagram)
#obs out of sample > 30
loss.favar <-  e.fcst.favar^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.var <-  e.fcst.var^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.ar1 <-  e.fcst.ar1^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
fluctuation_test(loss.favar,loss.ar1, mu = 0.5) #mu es la inversa de m, ver paper
fluctuation_test(loss.var,loss.ar1, mu = 0.5)
#hacerlo para los otros, se observa que no hay cambio estructural en el periodo
#Obtengo las medidas de accuracy: (evaluación media del modelo en todo el período)
accuracy(fcst.favar[,"Series 1"],y.test)
accuracy(fcst.var[,"Series 1"],y.test)
accuracy(fcst.ar1,y.test)
#Obtengo los errores de pronÃ³stico:
e.fcst.favar <- y[151:187,1]-fcst.favar[,"Series 1"]
e.fcst.var <- y[151:187,1]-fcst.var[,"Series 1"]
e.fcst.ar1 <- y[151:187,1]-fcst.ar1
#Test de Diebold-Mariano:
dm.test(e.fcst.favar, e.fcst.ar1, alternative = "two.sided", power = 2)
dm.test(e.fcst.var, e.fcst.ar1, alternative = "two.sided", power = 2)
#Test de Giacomini-Rossi:
library(murphydiagram)
#obs out of sample > 30
loss.favar <-  e.fcst.favar^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.var <-  e.fcst.var^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.ar1 <-  e.fcst.ar1^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
fluctuation_test(loss.favar,loss.ar1, mu = 0.2) #mu es la inversa de m, ver paper
fluctuation_test(loss.var,loss.ar1, mu = 0.2)
#Obtengo las medidas de accuracy: (evaluación media del modelo en todo el período)
accuracy(fcst.favar[,"Series 1"],y.test)
accuracy(fcst.var[,"Series 1"],y.test)
accuracy(fcst.ar1,y.test)
#Obtengo los errores de pronÃ³stico:
e.fcst.favar <- y[151:187,1]-fcst.favar[,"Series 1"]
e.fcst.var <- y[151:187,1]-fcst.var[,"Series 1"]
e.fcst.ar1 <- y[151:187,1]-fcst.ar1
#Test de Diebold-Mariano:
dm.test(e.fcst.favar, e.fcst.ar1, alternative = "two.sided", power = 2)
dm.test(e.fcst.var, e.fcst.ar1, alternative = "two.sided", power = 2)
#Test de Giacomini-Rossi:
library(murphydiagram)
#obs out of sample > 30
loss.favar <-  e.fcst.favar^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.var <-  e.fcst.var^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
loss.ar1 <-  e.fcst.ar1^2 #armo las funciones de pÃ©rdidas (cuadrÃ¡ticas)
fluctuation_test(loss.favar,loss.ar1, mu = 0.2) #mu es la inversa de m, ver paper
fluctuation_test(loss.var,loss.ar1, mu = 0.2)
fluctuation_test(loss.favar,loss.var, mu = 0.2)
summary(var2)
summary(var2)
#figura 3
autoplot(log(df_ury_ts[ ,c("IPC")])) +
labs(
title = "Logaritmo del Índice de Precios al Consumo.",
subtitle ="Uruguay, Feb-2005 a Ago-2020",
caption = "Fuente: INE."
) +
xlab("Mes/Año") +
ylab("Variación")
#figura 4
autoplot(diff(df_ury_ts[ ,c("IPC")])) +
labs(
title = "Variación mensual Índice de Precios al Consumo.",
subtitle ="Uruguay, Feb-2005 a Ago-2020",
caption = "Fuente: INE."
) +
xlab("Mes/Año") +
ylab("Variación")
#figura 5
autoplot(diff(log(df_ury_ts[ ,c("IPC")]))) +
labs(
title = "Variación mensual del logaritmo del Índice de Precios al
Consumo.",
subtitle ="Uruguay, Feb-2005 a Ago-2020",
caption = "Fuente: INE."
) +
xlab("Mes/Año") +
ylab("Variación")
#figura 3
autoplot(log(df_ury_ts[ ,c("IPC")])) +
labs(
title = "Logaritmo del Índice de Precios al Consumo.",
subtitle ="Uruguay, Feb-2005 a Ago-2020",
caption = "Fuente: INE."
) +
xlab("Mes/Año") +
ylab("Variación")
#figura 4
autoplot(diff(df_ury_ts[ ,c("IPC")])) +
labs(
title = "Variación mensual Índice de Precios al Consumo.",
subtitle ="Uruguay, Feb-2005 a Ago-2020",
caption = "Fuente: INE."
) +
xlab("Mes/Año") +
ylab("Variación")
#figura 5
autoplot(diff(log(df_ury_ts[ ,c("IPC")]))) +
labs(
title = "Figura 3. Variación mensual del logaritmo del IPC.",
subtitle ="Uruguay, Feb-2005 a Ago-2020",
caption = "Fuente: INE."
) +
xlab("Mes/Año") +
ylab("Variación")
#ELEGIR SI EL LINEAL O EL POLAR o SUBSERIES [SUBSERIES]
#ggseasonplot(diff(log(df_ury_ts[ ,c("IPC")])), year.labels = TRUE, year.labels.left = TRUE) +
#    labs(
#    title = "Figura 5. Índice de Precios al Consumo por año.",
#    subtitle ="Uruguay, Ene-2005 a Ago-2020",
#    caption = "Fuente: INE."
#    )
#ggseasonplot(diff(log(df_ury_ts[ ,c("IPC")])), polar = TRUE) +
#    labs(
#    title = "Figura 5. Índice de Precios al Consumo por año.",
#    subtitle ="Uruguay, Ene-2005 a Sep-2020",
#    caption = "Fuente: INE."
#    )
ggsubseriesplot(diff(log(df_ury_ts[ ,c("IPC")]))) +
labs(
title = "Figura 4. IPC por año.",
subtitle ="Uruguay, Ene-2005 a Sep-2020",
caption = "Fuente: INE."
)
ggAcf(diff(log(df_ury_ts[ ,c("IPC")]))) +
labs(
title = "Figura 5. Correlograma de la serie diferenciada del logaritmo de IPC.",
subtitle ="Uruguay, Ene-2005 a Sep-2020",
caption = "Fuente: INE.")
ggPacf(diff(log(df_ury_ts[ ,c("IPC")]))) +
labs(
title = "Figura 6. Correlograma parcial de la serie diferenciada del logaritmo de IPC.",
subtitle ="Uruguay, Ene-2005 a Sep-2020",
caption = "Fuente: INE.")
PC1 <- ts(pr.out$x[,1], start = c(2005,2), frequency = 12)
PC2 <- ts(pr.out$x[,2], start = c(2005,2), frequency = 12)
PC3 <- ts(pr.out$x[,3], start = c(2005,2), frequency = 12)
PC4 <- ts(pr.out$x[,4], start = c(2005,2), frequency = 12)
PC5 <- ts(pr.out$x[,5], start = c(2005,2), frequency = 12)
PCs <- cbind(PC1,PC2,PC3,PC4,PC5)
colnames(PCs) <- c("PC1","PC2", "PC3","PC4", "PC5")
plot(PCs, main="Fig. 9. Primeros cinco componentes principales", ylab="", xlab="")
PC1 <- ts(pr.out$x[,1], start = c(2005,2), frequency = 12)
PC2 <- ts(pr.out$x[,2], start = c(2005,2), frequency = 12)
PC3 <- ts(pr.out$x[,3], start = c(2005,2), frequency = 12)
PC4 <- ts(pr.out$x[,4], start = c(2005,2), frequency = 12)
PC5 <- ts(pr.out$x[,5], start = c(2005,2), frequency = 12)
PCs <- cbind(PC1,PC2,PC3,PC4,PC5)
colnames(PCs) <- c("PC1","PC2", "PC3","PC4", "PC5")
plot(PCs, main="Fig. 10. Primeros cinco componentes principales", ylab="", xlab="")
x.1 <- cbind(df_ury_ts[,"IPC"],df_ury_ts[,"M2_cierre"], df_ury_ts[,"TC_Cierre_Interb_media"])
colnames(x.1) <- c("IPC","M2_cierre", "TC_Cier_med")
plot(diff(log(x.1)), main="Figura 9. Series de IPC, M2 y tipo de cambio, en logaritmos y diferenciadas.")
x.1 <- cbind(df_ury_ts[,"IPC"],df_ury_ts[,"M2_cierre"], df_ury_ts[,"TC_Cierre_Interb_media"])
colnames(x.1) <- c("IPC","M2_cierre", "TC_Cier_med")
plot(diff(log(x.1)), main="Figura 9. Series de IPC, M2 y tipo de cambio, en logs y diferenciadas.")
